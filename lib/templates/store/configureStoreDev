import { createStore, applyMiddleware, compose } from 'redux';
{{#if hasSaga}}
import createSaga from 'redux-saga';
{{/if}}
import rootReducer from '../reducers';
{{#if hasSaga}}
import mySaga from '../sagas';

const saga = createSaga();
{{/if}}

const createEnhancer = () => {
  const appliedMiddlewares = applyMiddleware(
    {{#if hasSaga}}
    saga
    {{/if}}
  );

  {{#if hasReduxDevTools}}
  const reduxDevtoolsExtensionsCompose
    = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;

  if (reduxDevtoolsExtensionsCompose) {
    const devtoolsExtensionCompose = reduxDevtoolsExtensionsCompose({
      actionsBlacklist: []
    });

    return compose(devtoolsExtensionCompose(appliedMiddlewares));
  }
  else {
    return compose(appliedMiddlewares);
  }
  {{else}}
  return compose(appliedMiddlewares);
  {{/if}}
};

const configureStore = (initialState) => {
  const enhancer = createEnhancer();
  const store = createStore(rootReducer, initialState, enhancer);

  {{#if hasSaga}}
  saga.run(mySaga);
  {{/if}}
  return store;
};

export default configureStore;
