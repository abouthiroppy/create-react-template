'use strict';

const path          = require('path');
const chalk         = require('chalk');
const inquirer      = require('inquirer');
const templatesList = require('./list');
const story         = require('./stories');
const template      = require('./templates');
const createFile    = require('./utils/createFile');

let templateName;

Promise
  .resolve()
  .then(() => inquirer.prompt(templatesList))
  .then((t) => selectStory(t))
  .then((ans) => templateRouter(ans))
  .then((arr) => createFile(arr))
  .then(() => console.log(chalk.cyan('finish!')))
  .catch((err) => console.error(chalk.red(err)));

/**
 * select the story
 * @param {Object} t - generated by inquirer
 * @return {Promise}
 */
function selectStory(t) {
  templateName = t.template;
  return inquirer.prompt(story[templateName]);
}

/**
 * the router for templates
 * @param {Object} ans - the story's reply
 * @return {Promise | Error} inquirer Object
 */
function templateRouter(ans) {
  switch (templateName) {
    case 'store':
      console.log('Create 3 files for configureStore.');

      return Promise.all([
        template(
          'configureStore.js',
          'configureStore',
          path.join(__dirname, './templates/store/configureStore')
        ),
        template(
          'configureStore.dev.js',
          'configureStoreDev',
          path.join(__dirname, './templates/store/configureStoreDev'),
          ans
        ),
        template(
          'configureStore.prod.js',
          'configureStoreProd',
          path.join(__dirname, './templates/store/configureStoreProd'),
          ans
        )
      ]);
    case 'pComponent':
    case 'cComponent':
      return template.component(obj);
    case 'middleware':
      return template(
        `${ans.name}.js`,
        ans.name,
        path.join(__dirname, './templates/middleware/middleware')
      );
    default:
      throw new TypeError('Invalid argument');
  }
}
